complete_text = f"{product_description}{sub_product_description}\n\nREQUIREMENTS SPECIFICATION:\n{requirements}"

        output_format = """
        {
        "Test Case Number": "Unique numerical identifier for the test case",
        "FRD Section": "The section holding the requirements a test case covers",
        "Detailed Test Description": "A thorough description of the scenario being tested",
        "Detailed Expected Result": "The expected outcome if the scenario behaves correctly",
        "Testing Steps": "A clear, step-by-step guide for executing the test case",
        "Priority": "High/Medium/Low"
        }
        """
        
        prompt = f"""
        You are a seasoned business analyst specializing in software testing and quality assurance. 
        Your task is to meticulously design and develop a comprehensive suite of test cases for a recent software enhancement. 
        The objective is to ensure the software aligns perfectly with the specifications detailed in the provided requirements document, supplemented by insights from any reference documents.

        {complete_text}

        To achieve this, follow these detailed instructions:

        1. **Thorough Requirement Analysis**:
        - Delve deeply into each functional requirement and associated business logic.
        - Grasp the overarching objectives and anticipated user behaviors for every feature.

        2. **Test Case Development**:
        - Construct diverse test scenarios, including but not limited to:
            - **Positive Test Cases**: Scenarios with valid inputs resulting in expected outcomes.
            - **Negative Test Cases**: Scenarios with invalid or unexpected inputs to validate error handling.
            - **Boundary Value Analysis**: Tests focusing on the edges of input ranges to uncover any off-by-one errors.
            - **Edge Case Analysis**: Identify and evaluate scenarios that occur at extreme (maximum/minimum) operating parameters.

        3. **Contextual Considerations**:
        - Factor in various user roles, input variations, and dynamic system states.
        - Refer to additional context or specifications detailed in the Reference Document when crafting scenarios.

        4. **Output Format**:
        - Ensure each test case is formatted in a structured JSON format with the specified fields:
            - **Test Case Number**: A sequential identifier for easy reference.
            - **FRD Section**: The specific section or identifier of the Functional Requirement Document that the test case addresses.
            - **Detailed Test Description**: Clearly outline the scenario, including setup conditions and triggers.
            - **Detailed Expected Result**: Explicitly state the anticipated outcome if the system functions correctly.
            - **Testing Steps**: A concise, ordered list of procedures to execute the test case.
            - **Priority**: Assign a priority level (High, Medium, Low) based on the criticality of the test and its impact on essential system functionalities.

        5. **Ensure Clarity and Precision**:
        - Use clear, concise language to draft precise test cases.
        - Aim for exhaustive coverage, maximizing the breadth of scenarios tested while maintaining depth in logic.

        6. **Collaboration and Review**:
        - Treat this task as a collaborative effort between documentation insights and your analytical prowess.
        - Encourage iterative refinement of test cases to improve coverage and accuracy.

        The ultimate goal is to generate a highly detailed set of test cases that leave no stone unturned in verifying the software's adherence to specified requirements. Your output must be a JSON array encapsulating all test cases, ensuring clarity and completeness while utilizing the insights from both requirement and reference documents. There is no limit on document length, allowing comprehensive analysis. Always present the output in JSON {output_format} format enclosed in square brackets.
        """
        
        return prompt
