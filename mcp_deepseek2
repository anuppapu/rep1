elif tool.lower() == "fix_message_parser_tool":
                table_html, is_html = format_fix_message_table(parsed)
                if is_html:
                    st.markdown(table_html, unsafe_allow_html=True)
                else:
                    # Fallback for when table formatting fails
                    return f"<pre>{str(parsed)}</pre>", True

def format_fix_message_table(data):
    """Format FIX message parser tool output as a table with Tag, Value, Description columns."""
    # If data is a dict with a single key (e.g., 'Message 1'), extract the list
    if isinstance(data, dict):
        # If the dict has only one key and its value is a list, use that
        if len(data) == 1 and isinstance(list(data.values())[0], list):
            data = list(data.values())[0]
        else:
            # Try to find the list in a common key
            for key in ["parsed_tags", "tags", "fix_tags", "data"]:
                if key in data and isinstance(data[key], list):
                    data = data[key]
                    break
    if not isinstance(data, list):
        return None, False
    # Build table header
    table_html = """
    <div class='json-container'>
        <h3>ðŸ“‘ FIX Message Parsed Output</h3>
        <table style='width:100%; border-collapse: collapse;'>
            <thead>
                <tr style='background:#f0f0f0;'>
                    <th style='border:1px solid #ccc; padding:8px;'>Tag</th>
                    <th style='border:1px solid #ccc; padding:8px;'>Value</th>
                    <th style='border:1px solid #ccc; padding:8px;'>Description</th>
                </tr>
            </thead>
            <tbody>
    """
    for row in data:
        tag = row.get("Tag") or row.get("tag") or ""
        value = row.get("Value") or row.get("value") or ""
        desc = row.get("Description") or row.get("description") or ""
        table_html += f"<tr>"
        table_html += f"<td style='border:1px solid #ccc; padding:8px;'>{tag}</td>"
        table_html += f"<td style='border:1px solid #ccc; padding:8px;'>{value}</td>"
        table_html += f"<td style='border:1px solid #ccc; padding:8px;'>{desc}</td>"
        table_html += "</tr>"
    table_html += """
            </tbody>
        </table>
    </div>
    """
    return table_html, True 

update format_fix_message_table function in ui.py to display the data as a table format. above code is showing the data as a html code format.
